{"version":3,"sources":["components/FontAwesomeIcons/index.js","components/Navbar/index.js","utils/API.js","components/Container/index.js","components/Table/index.js","components/SearchBar/index.js","pages/Directory.js","components/Footer/index.js","App.js","index.js"],"names":["library","add","faLayerGroup","faSort","faLongArrowAltUp","faLongArrowAltDown","Navbar","className","style","backgroundColor","textAlign","to","color","display","icon","Faker","seed","employeesArray","i","user","firstname","name","firstName","lastname","lastName","jobTitle","department","commerce","employeeNumber","random","number","min","max","avatar","internet","email","push","Container","props","fluid","Table","handleTableSort","employeeRows","employees","map","item","index","key","src","alt","scope","onClick","SearchBar","search","myhandlesearch","employeeData","htmlFor","value","onChange","list","type","placeholder","id","Directory","state","isAscending","context","employeeArray","sort","a","b","propA","propB","isNaN","toUpperCase","comparison","setState","handleSearch","event","persist","target","searchVal","searchArray","API","filter","Object","values","some","element","toString","toLowerCase","includes","length","getSearchData","reduce","acc","cur","concat","this","width","Component","Footer","position","bottom","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd0027be.chunk.js","sourcesContent":["/*\n    *Import custom font-awesome library\n     import various font awesome icons and add to the library to use globally as props in a FontAwesomeIcon component\n\n*/\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faLayerGroup, faSort, faLongArrowAltUp, faLongArrowAltDown } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faLayerGroup, faSort, faLongArrowAltUp, faLongArrowAltDown)\n","/*\n  Import \n    *fontawesome icon library components\n    return Navbar JSX \n*/\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nfunction Navbar () {\n  return (\n    <nav\n      className='navbar navbar-expand-lg'\n      style={{ backgroundColor: '#40E0D0', textAlign: 'center' }}\n    >\n      <Link\n        className='navbar-brand mx-auto'\n        to='/'\n        style={{ color: '#ffffff', display: 'block', textAlign: 'center' }}\n      >\n        <h1>\n          <span className='px-3'>\n            <FontAwesomeIcon icon='layer-group' />\n          </span>\n          Stackify\n        </h1>\n      </Link>\n    </nav>\n  )\n}\n\nexport default Navbar\n","// Import faker module\nimport Faker from 'faker'\n\n/*\n  Method uses the faker library\n  Generates random data for 10 employees\n  faker.seed is used to ensure consistent data is displayed on component re-load\n  additional parameters added to get more predictable results\n*/\nexport default {\n  getRandomEmployees: function () {\n    Faker.seed(101)\n    let employeesArray = []\n    for (let i = 0; i < 10; i++) {\n      const user = {\n        firstname: Faker.name.firstName(),\n        lastname: Faker.name.lastName(),\n        jobTitle: Faker.name.jobTitle(),\n        department: Faker.commerce.department(),\n        employeeNumber: Faker.random.number({ min: 1000, max: 1999 }),\n        avatar: Faker.internet.avatar()\n      }\n      let email = Faker.internet.email(\n        `${user.firstname}`,\n        `_${user.lastname}`,\n        'stackify.ca'\n      )\n      user.email = email\n      employeesArray.push(user)\n    }\n    return employeesArray\n  }\n}\n","/*\n  Import \n    *fontawesome icon library components\n    return Container JSX \n*/\n\nimport React from 'react'\n\nfunction Container (props) {\n  return (\n    <div className={`container${props.fluid ? '-fluid' : ''}`} {...props} />\n  )\n}\n\nexport default Container\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nfunction Table(props) {\n  // Destructure props object\n  const { handleTableSort } = props\n\n  // Create table rows and pre-populate the rows the employee data\n  const employeeRows = props.employees.map((item, index) => {\n    const {avatar, firstname, lastname, jobTitle, department, employeeNumber, email} = item\n    \n    return (\n      <tr key={index}>\n        <td>\n          <img src={avatar} alt={`${firstname} ${lastname}`} />\n        </td>\n        <td>{firstname}</td>\n        <td>{lastname}</td>\n        <td>{jobTitle}</td>\n        <td>{department}</td>\n        <td>{employeeNumber}</td>\n        <td>{email}</td>\n      </tr>\n    )\n  })\n  return (\n    <table className='table table-hover table-responsive'>\n      <thead className='thead-light'>\n        <tr>\n          <th scope='col'>Avatar</th>\n          <th\n            scope='col'\n            onClick={() => handleTableSort('firstname')}\n            name={'firstname'}\n          >\n            Firstname <FontAwesomeIcon icon='long-arrow-alt-up' />{' '}\n            <FontAwesomeIcon icon='long-arrow-alt-down' />\n          </th>\n          <th\n            scope='col'\n            onClick={() => handleTableSort('lastname')}\n            name={'lastname'}\n          >\n            Lastname <FontAwesomeIcon icon='long-arrow-alt-up' />{' '}\n            <FontAwesomeIcon icon='long-arrow-alt-down' />\n          </th>\n          <th\n            scope='col'\n            onClick={() => handleTableSort('jobTitle')}\n            name={'jobTitle'}\n          >\n            Job Title <FontAwesomeIcon icon='long-arrow-alt-up' />{' '}\n            <FontAwesomeIcon icon='long-arrow-alt-down' />\n          </th>\n          <th\n            scope='col'\n            onClick={() => handleTableSort('department')}\n            name={'department'}\n          >\n            Department <FontAwesomeIcon icon='long-arrow-alt-up' />{' '}\n            <FontAwesomeIcon icon='long-arrow-alt-down' />\n          </th>\n          <th\n            scope='col'\n            onClick={() => handleTableSort('employeeNumber')}\n            name={'employeeNumber'}\n          >\n            Employee Number <FontAwesomeIcon icon='long-arrow-alt-up' />{' '}\n            <FontAwesomeIcon icon='long-arrow-alt-down' />\n          </th>\n          <th scope='col'>Email </th>\n        </tr>\n      </thead>\n      <tbody>{employeeRows}</tbody>\n    </table>\n  )\n}\n\nexport default Table\n","// import React, { useState, useEffect}from 'react'\nimport React from 'react'\n\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\nfunction SearchBar (props) {\n  // Destructure props object\n  const {search, myhandlesearch, style, employeeData } = props\n  return (\n    <form className='search'>\n      <div className='form-group'>\n        <label htmlFor='language'>\n          <h5>Find Employee:</h5>\n        </label>\n        <input\n          value={search}\n          onChange={myhandlesearch}\n          name='term'\n          list='data'\n          type='text'\n          className='form-control'\n          placeholder='Type in an employee name, department, or employee number to begin'\n          id='term'\n          style={style}\n        />\n        <datalist id='data'>{employeeData}</datalist>\n      </div>\n    </form>\n  )\n}\n\nexport default SearchBar\n","/*\n * Import\n *  - React and Component from react\n *  - Container JSX component\n *  - Table JSX component\n *  - SearchBar JSX component\n */\nimport React, { Component } from 'react'\nimport API from '../utils/API'\nimport Container from '../components/Container'\nimport Table from '../components/Table'\nimport SearchBar from '../components/SearchBar'\n\n/* Directory page renders\n * - SearchBar and Table components in a container component\n */\nclass Directory extends Component {\n  // State properties\n  state = {\n    employees: [],\n    employeeData: [],\n    isAscending: false,\n    search: ''\n  }\n\n  /* \n    * When the component mounts\n      - Get the array of all employees and update this.state.employees\n      - Get an array of all employee values to be used for auto-suggestion through the input datalist tag \n  */\n  componentDidMount () {\n    this.setState({ employees: API.getRandomEmployees() })\n    this.getSearchData()\n  }\n\n  /*\n    - Method to sort the employee directory table\n      - sort utilizes a compare function that defines how the table should be sorted (ascending or descending)\n      - context parameter is the name of the table header that is to be sorted. It is used as an object key in the array of employee objects\n  */\n  handleTableSort = context => {\n  \n    let employeeArray = this.state.employees\n\n    // compare function compares one value to the next value in the array\n    // and assigns comparison value of + 1 or - 1 based on their alphabetical order or numeric size\n    // a and b parameters are the two objects being compared with each array iteration\n    const compare = (a, b) => {\n\n      // Get the required table column (and Array) using context as object key\n      let propA = a[context]\n      let propB = b[context]\n\n      // If table column data is alphabetical, convert data to uppercase to ignore character casing\n      if (propA && propB && isNaN(propA) && isNaN(propB)) {\n        propA = propA.toUpperCase()\n        propB = propB.toUpperCase()\n      }\n\n      /*\n        * Based on the isAscending boolean state property\n          - set the isAscending value for the next order direction\n          - compare every value in the array and set a comparison value used to sort the table, \n          - switch the comparison value when ordering in the opposite direction\n          - setState and render the table to reflect the new order of employee list\n      */\n      let comparison = 0\n      switch (this.state.isAscending) {\n        case true:\n          this.setState({ isAscending: false })\n          if (propA > propB) {\n            comparison = -1\n          } else if (propA < propB) {\n            comparison = 1\n          }\n          break\n        case false:\n          this.setState({ isAscending: true })\n          if (propA > propB) {\n            comparison = 1\n          } else if (propA < propB) {\n            comparison = -1\n          }\n          break\n        default:\n          comparison = 0\n          break\n      }\n      return comparison\n    }\n\n    employeeArray.sort(compare)\n    this.setState({ employees: employeeArray })\n  }\n\n  /*\n    * - Function to handle state management associated with employee search\n  */\n  handleSearch = event => {\n    event.persist()\n    // Set the search state value with the input value of the search bar\n    this.setState({ search: event.target.value })\n\n    if (!this.state.search) {\n      return\n    }\n  \n    // Save the value in the target input\n    let searchVal = event.target.value\n    // Get the array of employees from the API \n    let employeeArray = API.getRandomEmployees()\n\n    // Check the array of employee objects by converting each object to an array\n    // then check if each value in the array contains the search value\n    let searchArray = employeeArray.filter(item => {\n      let itemArray = Object.values(item)\n      return itemArray.some(element => {\n        return element\n          .toString()\n          .toLowerCase()\n          .includes(searchVal.toLowerCase())\n      })\n    })\n    // If the search value exists in the array of employees\n    // re-render the table with the employees that meet the search criteria\n    // Otherwise re-render the pervious state data\n    if (searchVal && searchArray.length > 0) {\n      this.setState({ employees: searchArray })\n    } else if (searchVal === '') {\n      this.setState({ employees: API.getRandomEmployees() })\n    }\n  }\n\n  /*\n    * - Function to get the data needed for the search auto-recommendation\n  */\n  getSearchData = () => {\n    // Get the array of employee data\n    const empData = API.getRandomEmployees()\n    // eslint-disable-next-line\n    // reduce all employee objects into one single array of all employee data\n    const employeeData = empData.reduce(\n      (acc, cur) => Object.values(acc).concat(Object.values(cur)),\n      []\n    )\n    this.setState({ employeeData: employeeData })\n  }\n  render () {\n    return (\n      <div>\n        <Container className={'mx-auto'} style={{ width: '85%' }}>\n          <h4 className='text-center py-3'>Employee Directory</h4>\n          <SearchBar\n            style={{ width: '45%' }}\n            search={this.state.search}\n            myhandlesearch={this.handleSearch}\n            employeeData={this.state.employeeData.map((item, key) => (\n              <option key={key} value={item} />\n            ))}\n          />\n          <Table\n            handleTableSort={this.handleTableSort}\n            employees={this.state.employees}\n          />\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default Directory","/*\n  Import \n    *fontawesome icon library components\n    return Footer JSX \n*/\n\nimport React from 'react'\n\nfunction Footer () {\n  return (\n    <footer className='footer'>\n      <div className='text-center py-3' style={{backgroundColor: \"#E8E8E8\", width: \"100%\", position: \"fixed\", bottom: 0}}>\n        <span>Copyright &copy; 2020 Stackify Inc.</span>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer\n","// Import dependencies and components\nimport React from 'react'\nimport './components/FontAwesomeIcons'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport Navbar from './components/Navbar'\nimport Directory from './pages/Directory'\nimport Footer from './components/Footer'\n\n/*\n Return\n    *Navbar JSX component\n    *Directory page component\n      - made of Container, SearchBar, and Table components\n      - handles state management and lifecycle events\n    *Footer JSX component\n*/\nfunction App () {\n  return (\n    <Router>\n      <div>\n        <Navbar />\n        <Directory />\n        <Footer />\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","// Import dependencies\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n// Import application\nimport App from './App'\n\n// Render app\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)"],"sourceRoot":""}